#!/usr/bin/env ruby

def setup!
  within_project_root do
    run "bundle check > /dev/null 2>&1 || bundle install"
    run "yarn install" if File.exist?("yarn.lock")
    run "overcommit --install" if overcommit_present?
    copy "example.env", ".env.development"
    test_local_env_contains_required_keys
    run "RAILS_ENV=test bin/rails db:drop db:create"
    run "SKIP_TEST_DATABASE=1  bin/rails tmp:create db:prepare db:seed"
  end
end

require "bundler/inline"
require "fileutils"

gemfile do
  source "https://rubygems.org"
  gem "highline"
end

def within_project_root(&)
  Dir.chdir(File.expand_path("..", __dir__), &)
end

def overcommit_present?
  with_clean_bundler_env do
    system("which overcommit > /dev/null 2>&1") && system("overcommit -v > /dev/null 2>&1")
  end
end

def run(command)
  log(:blue, "run  #{command}")
  with_clean_bundler_env do
    system(command, exception: true)
  end
end

def with_clean_bundler_env(&)
  return yield unless defined?(Bundler)

  Bundler.with_clean_env(&)
end

def copy(source, dest)
  return if File.exist?(dest)

  log(:magenta, "copy #{source} â†’ #{dest}")
  FileUtils.cp(source, dest)
end

def test_local_env_contains_required_keys
  keys = ->(f) { File.readlines(f).filter_map { |l| l[/^([^#\s][^=\s]*)/, 1] } }

  log(:yellow, "test .env.development contents")
  missing = keys["example.env"] - keys[".env.development"]
  if missing.any?
    die("Your .env.development file is missing #{missing.join(", ")}")
  end
end

def log(color, message, out = $stdout)
  out.puts(message.sub(/^(\S*)/) { HighLine::String.new($1).public_send(color) })
end

def die(message)
  puts
  log(:red, "FAIL #{message}", $stderr)
  exit(1)
end

setup!
